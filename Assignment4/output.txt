Comment
storage_class_specifier -> static
declaration_specifiers_opt -> epsilon
declaration_specifiers -> storage_class_specifier declaration_specifiers_opt
pointer_opt -> epsilon
direct_declarator -> IDENTIFIER
declarator -> pointer_opt direct_declarator
constant -> INTEGER_CONSTANT
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
and_expression -> equality_expression
exclusive_or_expression -> and_expression
inclusive_or_expression -> exclusive_or_expression
logical_and_expression -> inclusive_or_expression
logical_or_expression -> logical_and_expression
conditional_expression -> logical_or_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
external_declaration -> declaration
translation_unit -> translation_unit external_declaration
storage_class_specifier -> register
declaration_specifiers_opt -> epsilon
declaration_specifiers -> storage_class_specifier declaration_specifiers_opt
pointer_opt -> epsilon
direct_declarator -> IDENTIFIER
declarator -> pointer_opt direct_declarator
constant -> INTEGER_CONSTANT
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
and_expression -> equality_expression
exclusive_or_expression -> and_expression
inclusive_or_expression -> exclusive_or_expression
logical_and_expression -> inclusive_or_expression
logical_or_expression -> logical_and_expression
conditional_expression -> logical_or_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
external_declaration -> declaration
translation_unit -> translation_unit external_declaration
storage_class_specifier -> static
declaration_specifiers_opt -> epsilon
declaration_specifiers -> storage_class_specifier declaration_specifiers_opt
pointer_opt -> epsilon
direct_declarator -> IDENTIFIER
declarator -> pointer_opt direct_declarator
constant -> INTEGER_CONSTANT
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
and_expression -> equality_expression
exclusive_or_expression -> and_expression
inclusive_or_expression -> exclusive_or_expression
logical_and_expression -> inclusive_or_expression
logical_or_expression -> logical_and_expression
conditional_expression -> logical_or_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
external_declaration -> declaration
translation_unit -> translation_unit external_declaration
storage_class_specifier -> extern
declaration_specifiers_opt -> epsilon
declaration_specifiers -> storage_class_specifier declaration_specifiers_opt
pointer_opt -> epsilon
direct_declarator -> IDENTIFIER
declarator -> pointer_opt direct_declarator
constant -> INTEGER_CONSTANT
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
and_expression -> equality_expression
exclusive_or_expression -> and_expression
inclusive_or_expression -> exclusive_or_expression
logical_and_expression -> inclusive_or_expression
logical_or_expression -> logical_and_expression
conditional_expression -> logical_or_expression
assignment_expression -> conditional_expression
initializer -> assignment_expression
init_declarator -> declarator = initializer
init_declarator_list -> init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
external_declaration -> declaration
translation_unit -> translation_unit external_declaration
type_specifier -> VOID
declaration_specifiers_opt -> epsilon
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> epsilon
direct_declarator -> IDENTIFIER
identifier_list_opt -> epsilon
direct_declarator -> direct_declarator ( identifier_list_opt )
declarator -> pointer_opt direct_declarator
declaration_list_opt -> epsilonprimary_expression -> INDENTIFIER
postfix_expression -> primary_expression
argument_expression_list_opt -> epsilonpostfix_expression -> postfix_expression(argument_expression_list_opt)
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
and_expression -> equality_expression
exclusive_or_expression -> and_expression
inclusive_or_expression -> exclusive_or_expression
logical_and_expression -> inclusive_or_expression
logical_or_expression -> logical_and_expression
conditional_expression -> logical_or_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
expression_statement -> expression_opt;
statement -> expression_statement
block_item -> statement
block_item_list -> block_item
block_item_list_opt -> block_item_list
compound_statement -> { block_item_list_opt }
function_definition -> declaration_specifiers declarator declaration_list_opt compound_statement
external_declaration -> function_definition
translation_unit -> translation_unit external_declaration
type_specifier -> INT
declaration_specifiers_opt -> epsilon
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> epsilon
direct_declarator -> IDENTIFIER
identifier_list_opt -> epsilon
direct_declarator -> direct_declarator ( identifier_list_opt )
declarator -> pointer_opt direct_declarator
declaration_list_opt -> epsilontype_specifier -> INT
declaration_specifiers_opt -> epsilon
declaration_specifiers -> type_specifier declaration_specifiers_opt
pointer_opt -> epsilon
direct_declarator -> IDENTIFIER
declarator -> pointer_opt direct_declarator
init_declarator -> declarator
init_declarator_list -> init_declarator
pointer_opt -> epsilon
direct_declarator -> IDENTIFIER
type_qualifier_list_opt -> epsilon
constant -> INTEGER_CONSTANT
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
and_expression -> equality_expression
exclusive_or_expression -> and_expression
inclusive_or_expression -> exclusive_or_expression
logical_and_expression -> inclusive_or_expression
logical_or_expression -> logical_and_expression
conditional_expression -> logical_or_expression
assignment_expression -> conditional_expression
assignment_expression_opt -> assignment_expression
direct_declarator -> direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
declarator -> pointer_opt direct_declarator
init_declarator -> declarator
init_declarator_list -> init_declarator_list , init_declarator
pointer_opt -> epsilon
direct_declarator -> IDENTIFIER
declarator -> pointer_opt direct_declarator
init_declarator -> declarator
init_declarator_list -> init_declarator_list , init_declarator
pointer_opt -> epsilon
direct_declarator -> IDENTIFIER
declarator -> pointer_opt direct_declarator
init_declarator -> declarator
init_declarator_list -> init_declarator_list , init_declarator
pointer_opt -> epsilon
direct_declarator -> IDENTIFIER
declarator -> pointer_opt direct_declarator
init_declarator -> declarator
init_declarator_list -> init_declarator_list , init_declarator
init_declarator_list_opt -> init_declarator_list
declaration -> declaration_specifiers init_declarator_list_opt ;
block_item -> declaration
block_item_list -> block_item
primary_expression -> INDENTIFIER
postfix_expression -> primary_expression
unary_expression -> postfix_expression
assignment_operator -> =
constant -> INTEGER_CONSTANT
primary_expression -> constant
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
and_expression -> equality_expression
exclusive_or_expression -> and_expression
inclusive_or_expression -> exclusive_or_expression
logical_and_expression -> inclusive_or_expression
logical_or_expression -> logical_and_expression
conditional_expression -> logical_or_expression
assignment_expression -> conditional_expression
assignment_expression -> unary_expression assignment_operator assignment_expression
expression -> assignment_expression
expression_opt -> expression
primary_expression -> INDENTIFIER
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
primary_expression -> INDENTIFIER
postfix_expression -> primary_expression
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> relational_expression < shift_expression
equality_expression -> relational_expression
and_expression -> equality_expression
exclusive_or_expression -> and_expression
inclusive_or_expression -> exclusive_or_expression
logical_and_expression -> inclusive_or_expression
logical_or_expression -> logical_and_expression
conditional_expression -> logical_or_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
primary_expression -> INDENTIFIER
postfix_expression -> primary_expression
postfix_expression -> postfix-expression ++
unary_expression -> postfix_expression
cast_expression -> unary_expression
multiplicative_expression -> cast_expression
additive_expression -> multiplicative_expression
shift_expression -> additive_expression
relational_expression -> shift_expression
equality_expression -> relational_expression
and_expression -> equality_expression
exclusive_or_expression -> and_expression
inclusive_or_expression -> exclusive_or_expression
logical_and_expression -> inclusive_or_expression
logical_or_expression -> logical_and_expression
conditional_expression -> logical_or_expression
assignment_expression -> conditional_expression
expression -> assignment_expression
expression_opt -> expression
block_item_list_opt -> epsilon
ERROR: syntax error